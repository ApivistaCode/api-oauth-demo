openapi: "3.0.0"
info:
  version: 1.0.0
  title: Three Hour Boat Tour Travel Insurance API
  description:
    Founded in 1965, we have reliably provided travel insurance to our customers.  We pride ourselves in making our policies affordable to everyone.  Whether you are a  movie star, a professor, or just randomly end up on a boat tour, you can enjoy the sites with the peace of mind that we have you covered.

servers:
  - url: http://localhost:9000/v1
paths:

  /policies:
    get:
      summary: List all policies
      tags:
        - policies
      security:
        - openId:
          - "read:policies"
      responses:
        '200':
          description: A array of policies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policies"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a policy
      tags:
        - policies
      security:
        - api_auth:
          - "create:policies"
      requestBody:
        required: true
        description: The new policy information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /policies/{policyId}:
    get:
      summary: Info for a specific policy
      tags:
        - policies
      security:
        - api_auth:
          - "read:policies"
      parameters:
        - name: policyId
          in: path
          required: true
          description: The id of the policy to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /agents:
    get:
      summary: List all insurance agents
      tags:
        - agents
      security:
        - api_auth:
          - "read:agents"
      responses:
        '200':
          description: A array of agents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agents"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add an agent
      tags:
        - agents
      security:
        - api_auth:
          - "create:agents"
      requestBody:
        required: true
        description: The new agent information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agent"
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /agents/{agentId}:
    get:
      summary: Info for a specific policy
      tags:
        - agents
      security:
        - api_auth:
          - "read:agents"
      parameters:
        - name: agentId
          in: path
          required: true
          description: The id of the agent to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a specific agent
      tags:
        - agents
      security:
        - api_auth:
          - "remove:agents"
      parameters:
        - name: agentId
          in: path
          required: true
          description: The id of the agent to remove
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    api_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "http://localhost:8000/auth?prompt=consent"
          tokenUrl: "http://localhost:8000/token"
          refreshUrl: "http://localhost:8000/refresh"
          scopes:
            offline_access: Required for requesting refresh tokens
            read:policies: view policy information
            create:policies: create insurance policies
            read:agents: view agent information
            create:agents: add new agents
            remove:agents: remove agents

  schemas:
    Policy:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        premium:
          type: number
          format: float
        agentId:
          type: string
          format: uuid

    Policies:
      type: array
      items:
        $ref: "#/components/schemas/Policy"

    Agent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        region:
          type: string

    Agents:
      type: array
      items:
        $ref: "#/components/schemas/Agent"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

